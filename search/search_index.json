{"docs":[{"location":"/index.html","text":"目录 《Netty实战》勘误 第1章——Netty——异步和事件驱动\n《Netty实战》\nNetty实战是一本写给Java和Scala开发者的Netty书。","title":""},{"location":"/contents.html","text":"","title":"目录 ·"},{"location":"/contents.html#目录","text":"","title":"目录"},{"location":"/errata/index.html","text":"","title":"《Netty实战》勘误 ·"},{"location":"/errata/index.html#netty实战-勘误","text":"blablabla","title":"《Netty实战》勘误"},{"location":"/chapter-01/index.html","text":"","title":"第1章——Netty——异步和事件驱动 ·"},{"location":"/chapter-01/index.html#第1章-netty-异步和事件驱动","text":"","title":"第1章——Netty——异步和事件驱动"},{"location":"/chapter-01/index.html#代码清单-1-1-阻塞-i-o-示例","text":"Java public void serve(int portNumber) throws IOException {\n    //创建一个新的 ServerSocket，用以监听指定端口上的连接请求\n    ServerSocket serverSocket = new ServerSocket(portNumber);\n    //对accept()方法的调用将被阻塞，直到一个连接建立\n    Socket clientSocket = serverSocket.accept();\n    //这些流对象都派生于该套接字的流对象\n    BufferedReader in = new BufferedReader(\n            new InputStreamReader(clientSocket.getInputStream()));\n    PrintWriter out =\n            new PrintWriter(clientSocket.getOutputStream(), true);\n    String request, response;\n    //处理循环开始\n    while ((request = in.readLine()) != null) {\n        if (\"Done\".equals(request)) {\n            break;\n        }\n        //请求被传递给服务器的处理方法\n        response = processRequest(request);\n        //服务器的响应被发送给了客户端\n        out.println(response);\n        //继续执行处理循环\n    }\n} Scala @throws[IOException]\ndef serve(portNumber: Int): Unit = {\n  //创建一个新的 ServerSocket，用以监听指定端口上的连接请求\n  val serverSocket = new ServerSocket(portNumber)\n  //对accept()方法的调用将被阻塞，直到一个连接建立\n  val clientSocket = serverSocket.accept\n  //这些流对象都派生于该套接字的流对象\n  val in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream))\n  val out = new PrintWriter(clientSocket.getOutputStream, true)\n  var request: String = in.readLine\n  var response: String = null\n  //处理循环开始\n  while (request ne null) {\n    if (\"Done\" != request) {\n      //请求被传递给服务器的处理方法\n      response = processRequest(request)\n      //服务器的响应被发送给了客户端\n      out.println(response)\n      //继续执行处理循环\n    }\n    request = in.readLine\n  }","title":"代码清单 1-1 阻塞 I/O 示例"}]}